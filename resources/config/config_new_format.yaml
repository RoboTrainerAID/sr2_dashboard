dashboard:
  menus:
    # All menus are part of the toolbar. Each menu contains one or multiple modules (menu entry + menu view) and is separated from the others by a separator "|"
    # menu 1
    - modules:
        # A module is represented by its menu_entry which can optionally (if type=="view") open a view
        # module 1
        - name: "Menu 1 Module 1"
          type: "noview"

          # menu entry 1 in menu 1
          menu_entry:
            package: "lt"
            # node | launch | service
            # node -> will be executed using 'rosrun'
            # launch -> will be executed using 'roslaunch' (roslaunch allows multiple files to be launched through the same parent process); the file extension .launch is added internally so do NOT write it here but just the file name! The names of the launch files are used for the generation of the PID file
            # service -> will be executed using 'rosservice call' (currently only Trigger services are supported; initial states is always set to False)
            node: "talker.py"
            # If type is 'noview' buttons-node will be skipped entirely
            # If type is 'view' buttons will be parsed and a widget will be created for each button which will then be added to a grid view

            # Buttons for view toggled by menu entry 1 in menu 1
            # NONE (we have type "noview" so even if we specify some buttons here the command/pkg/file specified in menu entry are the only ones that matter)

        # module 2
        - name: "Menu 1 Module 2"
          type: "view"

          # menu entry 2 in menu 1
          menu_entry:
            # Buttons for view toggled by menu entry 2 in menu 1
            buttons:
              # button 1
              - captions:
                  inactive: "Press me 1"
                  running: "Unpress me 1"
                  error: "Wooops... 2"
                icons:
                  inactive: "status/status_inactive.svg"
                  running: "status/status_running.svg"
                  error: "status/status_error.svg"
                package: "cob_bringup"
                launch: "robot" # Fall back to support for a single launch file (easier to maintain when it comes to the PID files)
              # button 1
              - captions:
                  inactive: "Press me 2"
                  running: "Unpress me 2"
                  error: "Wooops... 2"
                package: "lt"
                launch: "talker"

    # menu 2
    - modules:
        # module 1
        - name: "Menu 2 Module 1"
          type: "noview"

          # menu entry 1 in menu 1
          menu_entry:
            # If type is 'noview' the menu entry will also act as a command trigger!
            # If type is 'view' the menu entry will not contain any of the nodes below:
            package: "lt"
            # node | launch | service
            # node -> will be executed using 'rosrun'
            # launch -> will be executed using 'roslaunch' (roslaunch allows multiple files to be launched through the same parent process)
            # service -> will be executed using 'rosservice call' (currently only Trigger services are supported; initial states is always set to False)
            node: "listener.py"
            # If type is 'noview' buttons-node will be skipped entirely
            # If type is 'view' buttons will be parsed and a widget will be created for each button which will then be added to a grid view

            # Buttons for view toggled by menu entry 1 in menu 1
            # NONE (we have type "noview" so even if we specify some buttons here the command/pkg/file specified in menu entry are the only ones that matter)


###############################################################################################################################################
############################################################## OLD DOCUMENTATION ##############################################################
###############################################################################################################################################
#Note: names have to be unique because they are used as building components for the PID files! Also the dashboard requires unique names
#Note: resources for a button have to be located inside a resource directory inside the ROS package that the button uses

# WRITE DOCUMENTATION